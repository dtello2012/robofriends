{"version":3,"sources":["components/card/index.jsx","components/cardlist/index.jsx","components/searchbox/index.jsx","components/loading/index.jsx","components/scroll/index.jsx","components/ErrorBoundry/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Card","robot","className","src","id","alt","name","email","CardList","robots","map","index","key","Searchbox","searchChange","type","placeholder","onChange","e","Loading","style","position","left","top","zIndex","transform","Scroll","props","children","ErrorBoundry","state","hasError","errorMessage","error","this","setState","message","color","Component","App","componentDidMount","loading","setTimeout","fetch","then","response","json","users","onSearchChange","event","searchField","target","value","filteredRobots","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"4SAceA,G,MAZF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAG,+BAA0BF,EAAMG,IAAMC,IAAI,KAClD,6BACE,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCCHC,EANE,SAAC,GAChB,OAD+B,EAAbC,OACJC,KAAI,SAACT,EAAOU,GACxB,OAAO,kBAAC,EAAD,CAAMC,IAAG,eAAUD,GAASV,MAAOA,QCK/BY,EARG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKZ,UAAU,OACb,2BAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,gBAAgBC,SAAU,SAACC,GAAD,OAAOJ,EAAaI,Q,MCFnH,SAASC,IACtB,OACE,yBACEC,MAAO,CACLC,SAAU,QACVC,KAAM,MACNC,IAAK,MAELC,OAAQ,EACRC,UAAW,0BAGb,yBAAKvB,UAAU,YACb,8BACA,8BACA,8BACA,gC,MChBO,SAASwB,EAAOC,GAC7B,OAAO,yBAAKzB,UAAU,UAAUyB,EAAMC,U,ICFnBC,E,kDACnB,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDG,MAAQ,CACXC,UAAU,EACVC,aAAc,IAJC,E,8DAQDC,GAChBC,KAAKC,SAAS,CACZJ,UAAU,EACVC,aAAcC,EAAMG,Y,+BAGd,IAAD,EAC4BF,KAAKJ,MAAhCC,EADD,EACCA,SAAUC,EADX,EACWA,aAClB,OAAID,EAEA,6BACE,yDACA,uBAAGX,MAAO,CAAEiB,MAAO,SAAWL,IAI7B,oCAAGE,KAAKP,MAAMC,c,GAzBiBU,aC6D3BC,E,kDAtDb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAQRa,kBAAoB,WAElB,EAAKL,SAAS,CACZM,SAAS,IAEXC,YAAW,WACTC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAE1B,OAAQsC,EAAON,SAAS,SAC1D,MAlBc,EAqBnBO,eAAiB,SAACC,GAChB,EAAKd,SAAS,CACZe,YAAaD,EAAME,OAAOC,SArB5B,EAAKtB,MAAQ,CACXrB,OAAQ,GACRgC,SAAS,EACTS,YAAa,IALE,E,qDA2BT,IAAD,EACkChB,KAAKJ,MAAtCrB,EADD,EACCA,OAAQyC,EADT,EACSA,YAAaT,EADtB,EACsBA,QACvBY,EAAiB5C,EAAO6C,QAAO,SAACrD,GACpC,OAAOA,EAAMK,KAAKiD,cAAcC,SAASN,EAAYK,kBAEvD,OACE,yBAAKrD,UAAU,MACb,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWY,aAAcoB,KAAKc,iBAC7BP,GACC,yBAAKrB,MAAO,CAAEC,SAAU,aACtB,kBAACF,EAAD,OAGHkC,EAAeI,OAAS,GACvB,kBAAC/B,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,OAAQ4C,W,GA9CdK,IAAMpB,WCIJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAMG,c","file":"static/js/main.fc73e020.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ robot }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${robot.id}`} alt=\"\" />\n      <div>\n        <h2>{robot.name}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card\";\n\nconst CardList = ({ robots }) => {\n  return robots.map((robot, index) => {\n    return <Card key={`card-${index}`} robot={robot} />;\n  });\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Searchbox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input className=\"pa3 bs b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={(e) => searchChange(e)} />\n    </div>\n  );\n};\n\nexport default Searchbox;\n","import React from \"react\";\nimport \"./index.css\";\n\nexport default function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        left: \"50%\",\n        top: \"50%\",\n\n        zIndex: 2,\n        transform: \"translate(-50%, -50%)\",\n      }}\n    >\n      <div className=\"lds-ring\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\n\nexport default function Scroll(props) {\n  return <div className=\"scroll\">{props.children}</div>;\n}\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      errorMessage: \"\",\n    };\n  }\n\n  componentDidCatch(error) {\n    this.setState({\n      hasError: true,\n      errorMessage: error.message,\n    });\n  }\n  render() {\n    const { hasError, errorMessage } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1>Oooops. That is not good </h1>\n          <p style={{ color: \"#fff\" }}>{errorMessage}</p>\n        </div>\n      );\n    }\n    return <>{this.props.children}</>;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/cardlist\";\nimport Searchbox from \"./components/searchbox\";\nimport Loading from \"./components/loading\";\nimport Scroll from \"./components/scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: [],\n      loading: false,\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    // https://jsonplaceholder.typicode.com/users/\n    this.setState({\n      loading: true,\n    });\n    setTimeout(() => {\n      fetch(\"https://jsonplaceholder.typicode.com/users/\")\n        .then((response) => response.json())\n        .then((users) => this.setState({ robots: users, loading: false }));\n    }, 600);\n  };\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchField: event.target.value,\n    });\n  };\n\n  render() {\n    const { robots, searchField, loading } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Robofriends</h1>\n\n        <Searchbox searchChange={this.onSearchChange} />\n        {loading && (\n          <div style={{ position: \"relative\" }}>\n            <Loading />\n          </div>\n        )}\n        {filteredRobots.length > 0 && (\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}